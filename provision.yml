---
- hosts: all
  gather_facts: no
  sudo: yes
  sudo_user: "{{ ANSIBLE_SSH_USER }}"

  vars_files:
    - ./vars/base.yml

  vars_prompt:

    - name: "ssh_key_passphrase"
      prompt: "Enter private passphrase for pub key"
      private: yes
      default: "{{ DEFAULT_SSH_KEY_PASSPHRASE }}"

  tasks:

    - name: Update package cache if last run was more than 10 hours ago
      apt: update_cache=yes cache_valid_time={{ 60 * 60 * 10 }}
    
    - name: create /etc/apt/sources.list.d file
      command: mkdir -p /etc/apt/sources.list.d

    - name:
      apt_repository: repo={{ item }} state=present update_cache=yes
      with_items:
        - 'deb http://archive.canonical.com trusty partner' #skype
        - 'ppa:transmissionbt/ppa'                           #transmission torrent client
        - 'ppa:webupd8team/sublime-text-3'                   #sublime-text3
        - 'ppa:eugenesan/ppa'                                #wireshark
      ignore_errors: yes

    # the skype ppa above has problems.
    - name: add skype ppa
      shell: sudo add-apt-repository "deb http://archive.canonical.com/ $(lsb_release -sc) partner"
 
    - name: add some ppas
      shell: sudo add-apt-repository {{ item }}
      with_items:
        - "ppa:webupd8team/sublime-text-3"
        - "ppa:eugenesan/ppa"
        - "ppa:transmissionbt/ppa"
      ignore_errors: yes
      register: addppasresult

    - name: update cache
      command: sudo apt-get update
      when: addppasresult|success

    - name: remove potential apt lock 
      command: sudo rm -rf /var/cache/apt/archives/lock && sudo rm -rf /var/lib/dpkg/lock

    - name: fix broken dependencies
      shell: sudo apt-get -f -y install

    - name: Install system packages
      shell: sudo apt-get -y install {{ item }}
      with_items:
        - openssh-client
        - openssh-server
        - skype-bin
        - skype
        - kdiff3
        - python-pip
        - python-software-properties
        - software-properties-common
        - terminator
        - lsof
        - telnet
        - curl
        - mercurial
        - git
        - unrar
        - transmission
        - vlc
        #- sublime-text-installer
        - pep8
        - libpq-dev 
        - python2.7-dev
        - libxml2-dev 
        - libxslt1-dev
        - postgresql 
        - postgresql-contrib
        - network-manager-vpnc
        - vpnc
        - screen
        - build-essential
        - python-dev
        - python-setuptools
        - iftop
        #- ifconfig
        - tcptrack
        - wireshark
        - nano
      ignore_errors: yes

    - name: download google chrome 
      get_url: >
        url=https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 
        dest=/tmp

    - name: install google chrome
      command: sudo dpkg -i google-chrome-stable_current_amd64.deb chdir=/tmp
      register: chromeresult
      ignore_errors: yes

    - name: fix install chrome errors
      command: sudo apt-get -f -y install  
      when: chromeresult|failed
      notify:
        - reinstall_chrome

    - name: Install Python packages
      shell: sudo pip install --upgrade {{ item }}
      with_items: 
        - virtualenv
        - virtualenvwrapper
        - youtube-dl
        - pip

    - name: create users group
      group: name={{ USER }} state=present
     
    - name: check if ssh public key exists
      command: cat ~/.ssh/id_rsa.pub
      register: checksshresult
      ignore_errors: yes

    - name: create ssh-key 
      command: ssh-keygen -t rsa -C {{ SSH_KEY_COMMENT }} -b 2048 -q -N {{ ssh_key_passphrase }} -f /home/{{USER}}/.ssh/id_rsa
      when: checksshresult|failed

    #- name: start ssh-agent 
      #shell: ssh-agent /bin/bash

    #- name: load your key to the agent
      #command: ssh-add ~/.ssh/id_rsa

    - name: fetch the new users ssh public key
      shell: cat ~/.ssh/id_rsa.pub
      register: sshkeyresult

    - name: notify user their ssh public key
      debug: var=sshkeyresult

    - name: notify user of location of their ssh public key
      debug: msg="You can always see your public key in $HOME/.ssh/id_rsa.pub"

    - name: configure ssh/config
      template: src=templates/ssh_config.j2 
                dest=~/.ssh/config

    - name: configure .bashrc
      template: src=templates/bashrc.j2
                dest=~/.bashrc

    - name: configure .profile
      template: src=templates/profile.j2
                dest=~/.profile

    - name: configure gitconfig
      template: src=templates/gitconfig.j2
                dest=~/.gitconfig

    - name: configure hgrc(mercurial)
      template: src=templates/hgrc.j2
                dest=~/.hgrc
    
    - name: create pip conf 
      shell: mkdir -p ~/.pip && touch ~/.pip/pip.conf
      
    - name: configure pip cache conf
      template: src=templates/pip.conf.j2
                dest=~/.pip/pip.conf

    - name: create terminator conf dir
      command: mkdir -p ~/.config/terminator

    - name: configure terminator conf
      template: src=templates/terminator.conf.j2
                dest=~/.config/terminator/config

    - name: clone nvm
      git: >
        repo='https://github.com/creationix/nvm.git'
        dest=~/.nvm
        accept_hostkey=yes 

    - name: source bashrc
      shell: . ~/.bashrc

    - name: source profile
      shell: . ~/.profile
      ignore_errors: yes

    - name: install nodejs
      command: nvm install {{ NODE_VERSION }}
      ignore_errors: yes

    - name: use that nvm version
      command: nvm use v{{ NODE_VERSION }}
      ignore_errors: yes

    - name: make that node version the default
      command: nvm alias default v{{ NODE_VERSION }}
      ignore_errors: yes

    - name: configure /etc/vpnc/example.conf
      template: src=templates/example.conf.j2
                dest=/etc/vpnc/example.conf
      ignore_errors: yes

    - name: check if docker installed
      command: docker
      register: dockerresult
      ignore_errors: True
      notify: 
        - finally

    - name: install docker
      shell: sudo curl -sSL https://get.docker.io/ubuntu/ | sudo sh
      when: dockerresult|failed

    - name: Remove some default system packages
      apt: pkg={{ item }} state=absent
      with_items:
        - netsurf-gtk

  handlers:

    - name: reinstall_chrome
      command: sudo dpkg -i google-chrome-stable_current_amd64.deb chdir=/tmp

    - name: finally
      debug: msg="THATS IT. YOU are done."
